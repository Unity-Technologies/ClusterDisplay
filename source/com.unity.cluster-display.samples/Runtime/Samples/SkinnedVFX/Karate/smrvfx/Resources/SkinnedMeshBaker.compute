#pragma kernel TransferData

struct SamplePoint
{
    uint4 indices;
    float4 weights;
};

uint SampleCount;
float4x4 Transform;
float4x4 OldTransform;
float FrameRate;

StructuredBuffer<SamplePoint> SamplePoints;
StructuredBuffer<float3> PositionBuffer;
StructuredBuffer<float3> OldPositionBuffer;
StructuredBuffer<float3> NormalBuffer;

RWTexture2D<float4> PositionMap;
RWTexture2D<float4> VelocityMap;
RWTexture2D<float4> NormalMap;

// Point sampling function
float3 SampleBuffer(StructuredBuffer<float3> buffer, SamplePoint sp)
{
    return buffer[sp.indices.x] * sp.weights.x + 
           buffer[sp.indices.y] * sp.weights.y + 
           buffer[sp.indices.z] * sp.weights.z;
}

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

[numthreads(4, 4, 1)]
void TransferData(uint2 id : SV_DispatchThreadID)
{
    uint si = Hash(id.x + id.y * 65536) % SampleCount;
    // uint si = /*Hash(id.x + id.y)*/ (id.x * id.y) % SampleCount;
    // uint si = id.x + id.y;
    SamplePoint sp = SamplePoints[si];

    float3 p1 = SampleBuffer(PositionBuffer, sp);
    float3 p0 = SampleBuffer(OldPositionBuffer, sp);
    float3 n1 = normalize(SampleBuffer(NormalBuffer, sp));

    p0 = mul(OldTransform, float4(p0, 1)).xyz;
    p1 = mul(   Transform, float4(p1, 1)).xyz;
    n1 = mul(   Transform, float4(n1, 0)).xyz;

    PositionMap[id] = float4(p1, 1);
    VelocityMap[id] = float4((p1 - p0) * FrameRate, 0);
    NormalMap[id] = float4(n1, 0);
}
