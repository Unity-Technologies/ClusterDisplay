using System;
using System.Collections;
using System.Collections.Generic;
using Unity.ClusterDisplay;
using Unity.ClusterDisplay.RPC;
using UnityEngine;
using Random = UnityEngine.Random;

public class RandomTickVerification : MonoBehaviour
{
    private readonly List<float> localRandomNumberList = new List<float>();

    // This coroutine executes on both the emitter and repeater.
    private IEnumerator TickRandomNumber()
    {
        // No need to set the initial seed as that information is communicated automatically between the emitter and repeater.
        // Random.InitState(12345);

        // Wait for connection to stabilize.
        yield return null;
        
        var wait = new WaitForSeconds(1);
        
        // If your gonna start a coroutine from Start/Awake() that needs to be synchronized
        // between both the emitter and repeater. You'll need to yield the emitter coroutine
        // by one frame since the emitter essentially runs one frame ahead of the rest of the
        // cluster.
        if (ClusterDisplayState.IsEmitter)
            yield return null;
        
        while (true)
        {
            // Generate a new random number on both the emitter and repeater since this coroutine executes on both.
            float randomNumber = Random.Range(-100f, 100f);
            Debug.Log($"Generated new random number: \"{randomNumber}\", Count: {localRandomNumberList.Count}");
            // Add this new random number to a local list.
            localRandomNumberList.Add(randomNumber);
            
            if (ClusterDisplayState.IsEmitter) // If we are the emitter, send the list of random numbers to the repeaters.
                Verify(localRandomNumberList.ToArray());
            
            yield return wait;
        }
    }

    private void Start() =>
        StartCoroutine(TickRandomNumber());

    
    [ClusterRPC(RPCExecutionStage.AfterLateUpdate)]
    public void Verify(float[] emitterRandomNumbers)
    {
        // Only the repeater should perform the verification, so early out.
        if (ClusterDisplayState.IsEmitter)
            return;
        
        // If we enter this branch, then the execution timing of the RPC is probably wrong.
        if (localRandomNumberList.Count != emitterRandomNumbers.Length)
        {
            Debug.LogError($"Random number array generated by emitter is not the same size: \"{emitterRandomNumbers.Length}\" as the local list of random numbers: \"{localRandomNumberList.Count}\".");
            return;
        }
        
        string comparison = "";
        bool allMatch = true;
        
        // Foreach received emitter randomly generated number, determine wheather it matches our locally randomly generated number.
        for (int i = 0; i < localRandomNumberList.Count; i++)
        {
            bool match = Mathf.Approximately(localRandomNumberList[i], emitterRandomNumbers[i]);
            comparison = $"{comparison}\n\t{localRandomNumberList[i]} {(match ? "==" : "!=")} {emitterRandomNumbers[i]},";
            allMatch &= match;
        }
        
        // If all the numbers match, then the Random.state is synchronized between the emitter and repeater. 
        if (allMatch)
            Debug.Log($"Random numbers MATCH between emitter and repeater:{comparison}");
        else Debug.LogError($"Random numbers DO NOT MATCH between emitter and repeater:{comparison}");
    }
}
