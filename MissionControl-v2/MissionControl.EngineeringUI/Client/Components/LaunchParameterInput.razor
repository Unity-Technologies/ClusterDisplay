@using Unity.ClusterDisplay.MissionControl.MissionControl
@inject ILogger<LaunchParameterInput> logger

@if (Entry.Definition?.Constraint is LaunchCatalog.ListConstraint listConstraint)
{
    <RadzenDropDown @bind-Value=@StringValue Data="@listConstraint.Choices" />
}
else
{
    Constraint? constraint = Entry.Definition?.Constraint;
    RangeConstraint? rangeConstraint = constraint as RangeConstraint;

    switch (Entry.Definition?.Type)
    {
        case LaunchCatalog.LaunchParameterType.Boolean:
            <RadzenSwitch @bind-Value=@BoolValue />
            break;
        case LaunchCatalog.LaunchParameterType.Integer:
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="24px" JustifyContent="JustifyContent.Stretch">
                <RadzenNumeric @bind-Value=@IntValue Min="@(rangeConstraint?.MinInt32Inclusive)" Max="@(rangeConstraint?.MaxInt32Inclusive)" />
                @if (rangeConstraint is { Max: not null, Min: not null })
                {
                    <RadzenSlider @bind-Value=@IntValue Min="@rangeConstraint.MinInt32Inclusive" Max="@rangeConstraint.MaxInt32Inclusive" />
                }
            </RadzenStack>
            break;
        case LaunchCatalog.LaunchParameterType.Float:
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                <RadzenNumeric @bind-Value=@FloatValue Min="@(rangeConstraint?.MinDecimalInclusive)" Max="@(rangeConstraint?.MaxDecimalInclusive)" />
                @if (rangeConstraint is { Max: not null, Min: not null })
                {
                    <RadzenSlider @bind-Value=@FloatValue Min="@rangeConstraint.MinDecimalInclusive" Max="@rangeConstraint.MaxDecimalInclusive" />
                }
            </RadzenStack>
            break;
        case LaunchCatalog.LaunchParameterType.String:
            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                <RadzenTextBox @bind-Value=@StringValue />
                <div Class="rz-message rz-messages-error">@validationError</div>
            </RadzenStack>
            break;
        default:
            break;
    }
}

@code {
    [Parameter]
    public LaunchParameters.ParameterEntry Entry { get; set; }

    [Parameter]
    public EventCallback<LaunchParameters.ParameterEntry> OnValueChanged { get; set; }

    string? validationError;
    bool HasValidationError => string.IsNullOrEmpty(validationError);

    protected override void OnInitialized()
    {
        if (Entry is null)
        {
            throw new ArgumentNullException(nameof(Entry));
        }
    }

    public string StringValue
    {
        get => GetValue<string>();
        set => SetValue(value);
    }

    public int IntValue
    {
        get => Convert.ToInt32(Entry.Value);
        set => SetValue(value);
    }

    public float FloatValue
    {
        get => Convert.ToSingle(Entry.Value);
        set => SetValue(value);
    }

    public bool BoolValue
    {
        get => GetValue<bool>();
        set => SetValue(value);
    }

    T GetValue<T>() => (T)Entry.Value;

    void ValidateValue(int value)
    {
    }

    void SetValue<T>(T maybeValue)
    {
        // maybeValue could be null
        if (maybeValue is T value)
        {
            // Setting a non-default value for the parameter
            Entry.ParameterValue ??= new() { Id = Entry.Id };
            Entry.ParameterValue.Value = value;
        }

        OnValueChanged.InvokeAsync(Entry);
    }
}
