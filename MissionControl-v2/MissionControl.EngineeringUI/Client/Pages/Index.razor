@page "/"
@using Unity.ClusterDisplay.MissionControl.EngineeringUI.Dialogs
@inject DialogService DialogService
@inject Microsoft.Extensions.Logging.ILogger<Index> logger

<style>
    .nav-button-look {
        display: inline-block;
        vertical-align: middle;
    }

    .nav-button-look i  {
        color: var(--rz-panel-menu-icon-color);
    }
</style>

<PageTitle>Welcome</PageTitle>

<h1>Welcome to Mission Control</h1>

If you are working on a brand new cluster, the first step will be to configure your devices using the
<div class="row p-2 mx-0 my-1 rz-border-base-300 nav-button-look">
    <div class="col align-items-center d-flex px-0">
        <RadzenIcon Icon="hub" class="me-3"/> Devices
    </div>
</div>
section in the menu on the left.
<br /><br />
Then you can:
<ul>
    <li>
        Manage your assets (scenes) using the
        <div class="row p-2 mx-0 my-1 rz-border-base-300 nav-button-look">
            <div class="col align-items-center d-flex px-0">
                <RadzenIcon Icon="landscape" class="me-3" /> Assets
            </div>
        </div>
        section
    </li>
    <li>
        Select the asset to launch, how to launch it and launch it using the
        <div class="row p-2 mx-0 my-1 rz-border-base-300 nav-button-look">
            <div class="col align-items-center d-flex px-0">
                <RadzenIcon Icon="rocket_launch" class="me-3" /> Launch
            </div>
        </div>
        section
    </li>
    <li>
        Save and load back launch configurations using the
        <div class="row p-2 mx-0 my-1 rz-border-base-300 nav-button-look">
            <div class="col align-items-center d-flex px-0">
                <RadzenIcon Icon="list" class="me-3" /> Missions
            </div>
        </div>
        section
    </li>
    <li>
        Monitor the state of the different devices using the
        <div class="row p-2 mx-0 my-1 rz-border-base-300 nav-button-look">
            <div class="col align-items-center d-flex px-0">
                <RadzenIcon Icon="monitor_heart" class="me-3" /> Monitoring
            </div>
        </div>
        section
    </li>
</ul>

<RadzenButton Text="Click me" Click="@Test" />
<RadzenButton Text="Click me 2" Click="@Test2" />

@code
{
    async Task Test()
    {
        var result = await DialogService.CustomConfirm("Do it?", "Are you sure?", new ConfirmOptions {OkButtonText="Sure", CancelButtonText="Nah"});
        logger.LogInformation($"Custom dialog result: {result}");

        
    }

    async Task Test2()
    {
        var result = await DialogService.Confirm();
    }
}
