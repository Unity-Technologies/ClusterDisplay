openapi: 3.0.3
info:
  title: Mission Control - LaunchPad API
  description: |-
    This is the API to control a Mission Control Launch Pad.  Since one of the requirements is to be able to avoid having to run an update on each individual computer part of the Mission Control manually and to be able to run older Cluster Display executables, we decided to go toward a minimalist Launch Pad that does the strict minimum and delegate as much as possible to components it manages.  The most reliable update is the update we do not need to do!  Still, there is a planned mechanism for updates, but if everything goes according to plan, updates should be really rare.
  version: 1.0.0
servers:
  - url: http://localhost:8200/api/v1
paths:
  /status:
    get:
      summary: Gets status of the LaunchPad.
      parameters:
        - in: query
          name: minStatusNumber
          schema:
            type: integer
          description: Optional parameter specifying that the minimum statusNumber property of the returned Status.  Call will block until current status's statusNumber property >= the value of this parameter.
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '204':
          description: No Content, returned when called with minStatusNumber and it took too long for a state change to happen.  Caller should simply call get again (we return 204 to avoid blocking call to block for too long which can cause problems in some hosting environments).
  /health:
    get:
      summary: Get the LaunchPad's health diagnostic (changes every time it is queried).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /config:
    get:
      summary: Gets the configuration of the LaunchPad.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    put:
      summary: Sets the configuration of the LaunchPad.
      responses:
        '200':
          description: Success
        '202':
          description: Changes accepted but not all applied immediately (changes to the endpoints requires a power cycle (restart) of the Launch Pad).
        '400':
          description: Error in the request
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /commands:
    post:
      summary: Sends a command to the LaunchPad.
      requestBody:
        description: The command
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PrepareCommand'
                - $ref: '#/components/schemas/LaunchCommand'
                - $ref: '#/components/schemas/AbortCommand'
                - $ref: '#/components/schemas/ClearCommand'
                - $ref: '#/components/schemas/ShutdownCommand'
                - $ref: '#/components/schemas/RestartCommand'
                - $ref: '#/components/schemas/UpgradeCommand'
        required: true
      responses:
        '200':
          description: Successful operation.
        '202':
          description: Command accepted (executing or waitign to be executed).
        '400':
          description: Invalid command received (regardless of the current state of the LaunchPad).
          content:
            text/plain:
              schema:
                type: string
        '409':
          description: Command cannot be executed in the current state of the LaunchPad.
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Config:
      type: object
      description: LaunchPad's configuration.  This data will be passed to both pre-launch and launch executables by serializing this object to JSON and passing it using the LAUNCHPAD_CONFIG environment variable.  It is also the content of the config.json file used to store the configuration of the LaunchPad.  This configuration is where new launchpad parameters that do not change between launchables might be added in the future (for example the GPU index to use?).
      properties:
        controlEndPoint:
          type: string
          description: End point to which to listen for REST commands (most likely coming from MissionControl).
          example: ["http://0.0.0.0:8200"]
        clusterNetworkNic:
          type: string
          description: Name (or IP address) of the NIC connected to the cluster network.  Name will be transformed to an IP before serializing this object to fill LAUNCHPAD_CONFIG (to reduce the amount of work to be done by the launched payload).
        hangarBayEndpoint:
          type: string
          description: End point to which the hangar bay is listening for requests.
          default: http://127.0.0.1:8100
      required:
        - controlEndPoint
        - clusterNetworkNIC
    Status:
      type: object
      description: Status of the LaunchPad (changes once in a while).
      properties:
        version:
          type: string
          description: Version number of the running LaunchPad executable.
        startTime:
          type: string
          description: When did the LaunchPad was started.        
        state:
          type: string
          description: >
            State of the LaunchPad:
             * `idle` - Nothing is going on on the LaunchPad, could be use for new a launch.
             * `gettingPayload` - Currently receiving a payload to launch from the HangarBay.
             * `preLaunch` - Executing pre-launch executable to prepare the launchpad to the payload.
             * `waitingForLaunch` - Everything is ready, waiting for launch signal (to have a coordinated launch on all LaunchPads).
             * `launched` - Payload is launched (and still in the air (process running) otherwise state would have been changed to idle).
          enum: [idle, gettingPayload, preLaunch, waitingForLaunch, launched]
        pendingRestart:
          type: boolean
          description: Has some operations been done on the LaunchPad that requires a restart?          
        lastChanged:
          type: string
          description: When was the last time anything changed in the current status of the LaunchPad.
        statusNumber:
          type: integer
          description: Integer increased every time the status is changed.
    Health:
      type: object
      description: Health diagnostic of the LaunchPad and its surrounding (changes every time it is queried).
      properties:
        cpuUtilization:
          type: number
          minimum: 0.0
          maximum: 1.0
          description: Total CPU usage of the system.
        memoryUsage:
          type: integer
          description: Number of bytes of memory currently being used on the launch pad's computer.
        memoryAvailable:
          type: integer
          description: Number of bytes of physical memory installed on the launch pad's computer.
    PrepareCommand:
      type: object
      description: Command indicating that the LaunchPad should prepare for launching the specified payload.
      properties:
        type:
          type: string
          enum: [prepare]
          default: prepare
        payloadIds:
          type: array
          description: Identifiers of the payloads to get from the HangarBay
          items:
            type: string
            format: uuid
        payloadSource:
          type: string
          description: URI of where to download payloads if they are not already available in the HangarBay.
          example: http://mission-control-server:8000
        launchData:
          type: object
          description: Some data (opaque to the Launchpad) to be passed using the LAUNCH_DATA environment variable both during launch and pre-launch.  Because of OS limitations the amount of data in this object should be kept reasonable (current limitation seem to be around 8192 characters).
        preLaunchPath:
          type: string
          description: Path (relative to the toLaunch folder) to an optional executable to execute before launch.  This executable is responsible to ensure that any external dependencies are installed and ready to use.
        launchPath:
          type: string
          description: Path (relative to the toLaunch folder) to the executable to launch when the LaunchPad receives the Launch command.
      required:
        - type
        - payloadIds
        - launchPath
    LaunchCommand:
      type: object
      description: Command indicating the LaunchPad it should launch the payload.
      properties:
        type:
          type: string
          enum: [launch]
          default: launch
      required:
        - type
    AbortCommand:
      type: object
      description: Command indicating to the LaunchPad that it should aborts whatever it was doing (so that its status returns to idle).
      properties:
        type:
          type: string
          enum: [abort]
          default: abort
      required:
        - type
    ClearCommand:
      type: object
      description: Command indicating to the LaunchPad to clear any previous file waiting for a potential relaunch on the LaunchPad.
      properties:
        type:
          type: string
          enum: [clear]
          default: clear
      required:
        - type
    ShutdownCommand:
      type: object
      description: Command asking the LaunchPad to shutdown.  Use with care as the only way to restart it is to do some manual interventions on the computer running it, designed to be sued as part of automated testing.
      properties:
        type:
          type: string
          enum: [shutdown]
          default: shutdown
      required:
        - type
    RestartCommand:
      type: object
      description: Command asking the LaunchPad to restart.
      properties:
        type:
          type: string
          enum: [restart]
          default: restart
        timeoutSec:
          type: integer
          description: Maximum amount of time to wait for this process to exit before forcing it (killing the process).
          default: 60
          example: 120
      required:
        - type
    UpgradeCommand:
      type: object
      description: Command asking the LaunchPad to upgrade.
      properties:
        type:
          type: string
          enum: [upgrade]
          default: upgrade
        newVersionUrl:
          type: string
          description: URL to the zip file to download that contains the new version.
          example: http://mission-control-server:8000/launchpad.zip
        timeoutSec:
          type: integer
          description: Maximum amount of time to wait for this process to exit before forcing it (killing the process).
          default: 60
          example: 120
      required:
        - type
        - newVersionUrl
